#!/usr/bin/env python3
"""
Script de build automatis√© pour cr√©er un .exe de Death Must Pygame
Utilise PyInstaller pour g√©n√©rer un ex√©cutable Windows distributable

Usage:
    python build_exe.py [--onefile] [--windowed] [--clean]
"""

import os
import sys
import shutil
import subprocess
import argparse
from pathlib import Path

def check_requirements():
    """V√©rifie que tous les pr√©-requis sont install√©s"""
    try:
        import PyInstaller
        print("‚úÖ PyInstaller trouv√©")
    except ImportError:
        print("‚ùå PyInstaller non trouv√©. Installation...")
        subprocess.run([sys.executable, "-m", "pip", "install", "pyinstaller"])
        print("‚úÖ PyInstaller install√©")
    
    try:
        import pygame
        print("‚úÖ pygame trouv√©")
    except ImportError:
        print("‚ùå pygame requis pour le build")
        sys.exit(1)

def clean_build():
    """Nettoie les dossiers de build pr√©c√©dents"""
    folders_to_clean = ["build", "dist", "__pycache__"]
    for folder in folders_to_clean:
        if os.path.exists(folder):
            shutil.rmtree(folder)
            print(f"üßπ Nettoy√©: {folder}")
    
    # Nettoie les fichiers .spec existants
    for spec_file in Path(".").glob("*.spec"):
        spec_file.unlink()
        print(f"üßπ Supprim√©: {spec_file}")

def create_version_file():
    """Cr√©e un fichier de version pour l'exe Windows"""
    version_content = """
# UTF-8
VSVersionInfo(
  ffi=FixedFileInfo(
    filevers=(1, 0, 0, 0),
    prodvers=(1, 0, 0, 0),
    mask=0x3f,
    flags=0x0,
    OS=0x40004,
    fileType=0x1,
    subtype=0x0,
    date=(0, 0)
  ),
  kids=[
    StringFileInfo(
      [
      StringTable(
        u'040904B0',
        [StringStruct(u'CompanyName', u'Death Must Pygame'),
        StringStruct(u'FileDescription', u'Reincarnation of the unkillable last human against all gods'),
        StringStruct(u'FileVersion', u'1.0.0.0'),
        StringStruct(u'InternalName', u'DeathMustPygame'),
        StringStruct(u'LegalCopyright', u''),
        StringStruct(u'OriginalFilename', u'DeathMustPygame.exe'),
        StringStruct(u'ProductName', u'Death Must Pygame'),
        StringStruct(u'ProductVersion', u'1.0.0.0')])
      ]), 
    VarFileInfo([VarStruct(u'Translation', [1033, 1200])])
  ]
)
"""
    with open("version.txt", "w", encoding="utf-8") as f:
        f.write(version_content)
    print("‚úÖ Fichier de version cr√©√©")

def get_pygame_data_paths():
    """R√©cup√®re les chemins des donn√©es pygame n√©cessaires"""
    import pygame
    pygame_path = Path(pygame.__file__).parent
    
    data_files = []
    
    # Ajouter les DLLs pygame si elles existent
    pygame_dlls = pygame_path / "pygame"
    if pygame_dlls.exists():
        for dll in pygame_dlls.glob("*.dll"):
            data_files.append((str(dll), "."))
    
    return data_files

def get_hidden_imports():
    """R√©cup√®re automatiquement les modules cach√©s n√©cessaires"""
    hidden_imports = [
        # Core pygame
        "pygame",
        "pygame.mixer",
        "pygame.font", 
        "pygame.freetype",
        "pygame.gfxdraw",
        "pygame.image",
        "pygame.transform",
        "pygame.surfarray",
        "pygame.math",
        "pygame.time",
        "pygame.event",
        "pygame.key",
        "pygame.mouse",
        "pygame.display",
        "pygame.surface",
        "pygame.rect",
        "pygame.sprite",
        "pygame.mask",
        
        # D√©pendances scientifiques
        "numpy",
        "numpy.core",
        "numpy.core._multiarray_umath",
        "numpy.core._multiarray_tests",
        "numpy.fft._pocketfft_umath",
        "numpy.linalg._umath_linalg",
        "numpy.random.bit_generator",
        "numpy.random.mtrand",
        "numpy.random._bounded_integers",
        "numpy.random._common",
        "numpy.random._generator",
        "numpy.random._mt19937",
        "numpy.random._pcg64",
        "numpy.random._philox",
        "numpy.random._sfc64",
        
        # PIL/Pillow
        "PIL",
        "PIL.Image",
        "PIL.ImageFilter",
        "PIL.ImageEnhance",
        "PIL._imaging",
        "PIL._imagingcms",
        "PIL._imagingmath",
        "PIL._webp",
        
        # Modules syst√®me
        "json",
        "pathlib",
        "random",
        "math",
        "os",
        "sys",
        "time",
        "collections",
        
        # D√©pendances cach√©es probl√©matiques
        "jaraco",
        "jaraco.text",
        "pkg_resources",
        "pkg_resources.py31compat",
        "importlib_metadata",
        "importlib_metadata._adapters",
        "importlib_metadata._meta",
        "zipp",
        "packaging",
        "packaging.version",
        "packaging.specifiers",
        "packaging.requirements",
        
        # Autres d√©pendances communes
        "six",
        "setuptools",
        "distutils",
        "email",
        "email.mime",
        "email.mime.text",
        "urllib",
        "urllib.parse",
        "urllib.request",
        "ssl",
        "socket",
        "select",
        "threading",
        "queue",
        "multiprocessing",
        "concurrent.futures",
        "logging",
        "weakref",
        "gc",
        "platform",
        "traceback",
        "warnings",
        "contextlib",
        "functools",
        "itertools",
        "operator",
        "types",
        "copy",
        "pickle",
        "base64",
        "hashlib",
        "hmac",
        "binascii",
        "struct",
        "array",
        "io",
        "codecs",
        "locale",
        "datetime",
        "calendar",
        "re",
        "string",
        "textwrap",
        "unicodedata",
        "encodings",
        "encodings.utf_8",
        "encodings.cp1252",
        "encodings.latin_1"
    ]
    
    # V√©rifier quels modules sont disponibles
    available_imports = []
    for module in hidden_imports:
        try:
            __import__(module)
            available_imports.append(module)
            print(f"‚úÖ Module trouv√©: {module}")
        except ImportError:
            print(f"‚ö†Ô∏è Module non trouv√©: {module}")
    
    return available_imports

def build_executable(onefile=False, windowed=False):
    """Construit l'ex√©cutable avec PyInstaller"""
    
    # Arguments de base pour PyInstaller
    args = [
        sys.executable, "-m", "PyInstaller",
        "--clean",
        "--noconfirm",
        "--name", "DeathMustPygame",
        "--version-file", "version.txt",
    ]
    
    # Ajouter l'ic√¥ne seulement si elle existe
    icon_path = "assets/icon.ico"
    if os.path.exists(icon_path):
        args.extend(["--icon", icon_path])
        print(f"‚úÖ Ic√¥ne trouv√©e: {icon_path}")
    else:
        print(f"‚ö†Ô∏è Pas d'ic√¥ne trouv√©e ({icon_path}), cr√©ation sans ic√¥ne")
    
    # Mode de build
    if onefile:
        args.append("--onefile")
    else:
        args.append("--onedir")
    
    # Mode fen√™tr√© (sans console)
    if windowed:
        args.append("--windowed")
    else:
        args.append("--console")
    
    # Ajout des assets et fichiers de donn√©es
    data_dirs = [
        "assets",
        "fx", 
        "config"
    ]
    
    for data_dir in data_dirs:
        if os.path.exists(data_dir):
            args.extend(["--add-data", f"{data_dir};{data_dir}"])
            print(f"‚úÖ Dossier ajout√©: {data_dir}")
    
    # Modules cach√©s avec d√©tection automatique
    print("\nüîç D√©tection des modules cach√©s...")
    hidden_imports = get_hidden_imports()
    
    for module in hidden_imports:
        args.extend(["--hidden-import", module])
    
    # Exclusions pour r√©duire la taille
    excludes = [
        "tkinter",
        "unittest",
        "test",
        "distutils.tests",
        "setuptools.tests",
        "pip._internal.tests",
        "pydoc",
        "pdb",
        "doctest",
        "turtle",
        "turtledemo",
        "lib2to3",
        "ctypes.test",
        "sqlite3.test",
        "test.test_asyncio",
        "test.test_subprocess",
    ]
    
    for exclude in excludes:
        args.extend(["--exclude-module", exclude])
    
    # Options suppl√©mentaires pour r√©soudre les probl√®mes
    args.extend([
        "--collect-all", "pygame",
        "--collect-all", "pkg_resources",
        "--copy-metadata", "pygame",
        "--copy-metadata", "setuptools",
        "--recursive-copy-metadata", "pygame",
    ])
    
    # Script principal
    args.append("game/main.py")
    
    print(f"\nüî® Construction de l'ex√©cutable avec {len(hidden_imports)} modules cach√©s...")
    print(f"üìã Commande: {' '.join(args[:10])}... ({len(args)} arguments total)")
    
    # Ex√©cution de PyInstaller
    result = subprocess.run(args, capture_output=True, text=True)
    
    if result.returncode == 0:
        print("‚úÖ Build r√©ussi!")
        
        # Informations sur le r√©sultat
        if onefile:
            exe_path = Path("dist") / "DeathMustPygame.exe"
            if exe_path.exists():
                size_mb = exe_path.stat().st_size / (1024 * 1024)
                print(f"üì¶ Ex√©cutable cr√©√©: {exe_path} ({size_mb:.1f} MB)")
        else:
            dist_folder = Path("dist") / "DeathMustPygame"
            if dist_folder.exists():
                total_size = sum(f.stat().st_size for f in dist_folder.rglob('*') if f.is_file())
                size_mb = total_size / (1024 * 1024)
                print(f"üì¶ Dossier cr√©√©: {dist_folder} ({size_mb:.1f} MB)")
                
        return True
    else:
        print("‚ùå Erreur lors du build:")
        print("STDOUT:", result.stdout)
        print("STDERR:", result.stderr)
        return False

def create_readme():
    """Cr√©e un README pour la distribution"""
    readme_content = """# Death Must Pygame - Distribution

## Comment jouer

### Ex√©cutable unique (.exe)
Double-cliquez sur `DeathMustPygame.exe` pour lancer le jeu.

### Dossier de distribution
1. Naviguez dans le dossier `DeathMustPygame`
2. Double-cliquez sur `DeathMustPygame.exe`

## Contr√¥les
- ZQSD : Se d√©placer
- ESPACE : Dash
- Clic gauche : Attaquer
- Clic droit : Cri
- F1 : Menu d'√©quilibrage (pendant le jeu)
- ESC : Pause

## Configuration
Le jeu sauvegarde automatiquement vos param√®tres dans le dossier `config/`.

## D√©pannage
Si le jeu ne se lance pas :
1. V√©rifiez que votre antivirus ne bloque pas l'ex√©cutable
2. Essayez de lancer en tant qu'administrateur
3. V√©rifiez que Visual C++ Redistributable est install√©

## Syst√®me requis
- Windows 10/11 (64-bit)
- DirectX 11 compatible
- 100 MB d'espace disque libre
"""
    
    with open("dist/README.txt", "w", encoding="utf-8") as f:
        f.write(readme_content)
    print("‚úÖ README cr√©√©")

def main():
    parser = argparse.ArgumentParser(description="Build Death Must Pygame executable")
    parser.add_argument("--onefile", action="store_true", 
                       help="Cr√©er un seul fichier .exe (plus lent au d√©marrage)")
    parser.add_argument("--windowed", action="store_true",
                       help="Cr√©er un .exe sans console (mode fen√™tr√©)")
    parser.add_argument("--clean", action="store_true",
                       help="Nettoyer les builds pr√©c√©dents avant de commencer")
    
    args = parser.parse_args()
    
    print("üéÆ Build de Death Must Pygame")
    print("=" * 50)
    
    # V√©rification des pr√©-requis
    check_requirements()
    
    # Nettoyage si demand√©
    if args.clean:
        clean_build()
    
    # Cr√©ation du fichier de version
    create_version_file()
    
    # Build de l'ex√©cutable
    success = build_executable(onefile=args.onefile, windowed=args.windowed)
    
    if success:
        # Cr√©ation du README
        create_readme()
        
        print("\nüéâ Build termin√© avec succ√®s!")
        print(f"üìÅ Fichiers disponibles dans le dossier 'dist/'")
        
        if args.onefile:
            print("\nüí° Mode onefile: L'ex√©cutable est autonome mais plus lent au d√©marrage")
        else:
            print("\nüí° Mode onedir: D√©marrage plus rapide, distribuez tout le dossier")
            
        print("\nüìã Conseils pour la distribution:")
        print("  - Testez l'exe sur une machine diff√©rente")
        print("  - Cr√©ez un zip pour faciliter la distribution")
        print("  - Ajoutez un antivirus scan pour rassurer les utilisateurs")
        
    else:
        print("\n‚ùå √âchec du build")
        sys.exit(1)

if __name__ == "__main__":
    main() 