#!/usr/bin/env python3
"""
Script de build simplifi√© pour Death Must Pygame
√âvite les probl√®mes de d√©pendances complexes
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def clean_build():
    """Nettoie les builds pr√©c√©dents"""
    for folder in ["build", "dist", "__pycache__"]:
        if os.path.exists(folder):
            shutil.rmtree(folder)
            print(f"üßπ Nettoy√©: {folder}")
    
    for spec_file in Path(".").glob("*.spec"):
        spec_file.unlink()
        print(f"üßπ Supprim√©: {spec_file}")

def build_simple():
    """Build simplifi√© avec PyInstaller"""
    
    print("üéÆ Build simplifi√© de Death Must Pygame")
    print("=" * 50)
    
    # Nettoyage
    clean_build()
    
    # Commande PyInstaller simplifi√©e avec le nouveau launcher
    cmd = [
        sys.executable, "-m", "PyInstaller",
        "--onedir",                    # Mode dossier (plus fiable)
        "--console",                   # Avec console pour d√©bugger
        "--clean",                     # Nettoyage
        "--noconfirm",                 # Pas de confirmation
        "--name", "DeathMustPygame",   # Nom de l'exe
        "--add-data", "game;game",     # Dossier game entier
        "--add-data", "assets;assets", # Assets
        "--add-data", "fx;fx",         # Sons
        "--add-data", "config;config", # Config
        "--collect-all", "pygame",     # Tout pygame
        "--hidden-import", "pygame",
        "--hidden-import", "pygame.mixer",
        "--hidden-import", "pygame.font",
        "--hidden-import", "pygame.freetype",
        "--hidden-import", "json",
        "--hidden-import", "pathlib",
        "--hidden-import", "random",
        "--hidden-import", "game.main",
        "--hidden-import", "game.settings",
        "--hidden-import", "game.player",
        "--hidden-import", "game.enemy",
        "--hidden-import", "game.xp_orb",
        "--hidden-import", "game.goblin_mage",
        "--hidden-import", "game.boss",
        "--hidden-import", "game.balance_menu",
        "--hidden-import", "game.pause_system",
        "--hidden-import", "game.balance_manager",
        "--hidden-import", "game.settings_menu",
        "--hidden-import", "game.settings_manager",
        "--hidden-import", "game.audio_manager",
        "--exclude-module", "tkinter",
        "--exclude-module", "unittest",
        "--exclude-module", "test",
        "--exclude-module", "jaraco",          # Exclure jaraco pour √©viter les probl√®mes
        "--exclude-module", "pkg_resources",   # Exclure pkg_resources probl√©matique
        "--exclude-module", "setuptools",
        "--exclude-module", "pip",
        "launcher.py"                          # Utiliser le launcher au lieu de game/main.py
    ]
    
    print("üî® Construction en cours...")
    print(f"üìã Commande: {' '.join(cmd[:15])}...")
    
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print("‚úÖ Build r√©ussi!")
        
        # V√©rification du r√©sultat
        exe_path = Path("dist/DeathMustPygame/DeathMustPygame.exe")
        if exe_path.exists():
            size_mb = exe_path.stat().st_size / (1024 * 1024)
            print(f"üì¶ Ex√©cutable cr√©√©: {exe_path} ({size_mb:.1f} MB)")
            
            # Test rapide de l'exe
            print("\nüß™ Test rapide de l'ex√©cutable...")
            test_result = subprocess.run([str(exe_path), "--help"], 
                                       capture_output=True, text=True, timeout=10)
            if test_result.returncode == 0:
                print("‚úÖ L'ex√©cutable semble fonctionner")
            else:
                print(f"‚ö†Ô∏è Test non concluant (code: {test_result.returncode})")
            
            return True
        else:
            print("‚ùå Ex√©cutable non trouv√© apr√®s le build")
            return False
            
    except subprocess.CalledProcessError as e:
        print("‚ùå Erreur lors du build:")
        print("STDOUT:", e.stdout)
        print("STDERR:", e.stderr)
        return False
    except subprocess.TimeoutExpired:
        print("‚ö†Ô∏è Test de l'ex√©cutable interrompu (timeout)")
        return True  # Le build a r√©ussi m√™me si le test a √©chou√©

def create_launcher():
    """Cr√©e un script de lancement alternatif"""
    launcher_content = """@echo off
echo Lancement de Death Must Pygame...
cd /d "%~dp0"
DeathMustPygame.exe
if errorlevel 1 (
    echo.
    echo Erreur lors du lancement du jeu.
    echo Appuyez sur une touche pour voir les details...
    pause
    DeathMustPygame.exe
)
"""
    
    with open("dist/DeathMustPygame/Lancer_Jeu.bat", "w", encoding="utf-8") as f:
        f.write(launcher_content)
    print("‚úÖ Script de lancement cr√©√©: Lancer_Jeu.bat")

if __name__ == "__main__":
    if build_simple():
        create_launcher()
        print("\nüéâ Build termin√© avec succ√®s!")
        print("üìÅ Fichiers dans: dist/DeathMustPygame/")
        print("üöÄ Utilisez Lancer_Jeu.bat pour tester")
    else:
        print("\n‚ùå √âchec du build")
        sys.exit(1) 